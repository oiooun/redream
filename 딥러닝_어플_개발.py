# -*- coding: utf-8 -*-
"""딥러닝 어플 개발.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TWp7jt6UtXcKkVSWxV-bc6NPQ29LW4rx

# 1. NLP 구현, GAN 이미지 구현
꿈 텍스트를 처리하여 키워드와 감정을 추출하고 텍스트에 맞는 이미지를 구현
"""

!pip install deep_translator
!git clone https://github.com/NVlabs/stylegan3.git
!cd stylegan3
!pip install deep-translator

import sqlite3
from transformers import pipeline
from deep_translator import GoogleTranslator
import spacy
from diffusers import AutoPipelineForText2Image
import torch
import os
from PIL import Image

# spaCy 모델 로드
nlp = spacy.load("en_core_web_sm")

# HuggingFace 감정 분석 모델 로드
emotion_analyzer = pipeline("sentiment-analysis", model="cardiffnlp/twitter-roberta-base-sentiment")

# Stable Diffusion 모델 로드
pipe = AutoPipelineForText2Image.from_pretrained(
    "stabilityai/stable-diffusion-2-1",
    torch_dtype=torch.float32
)

# 디바이스 설정 (GPU 또는 CPU)
device = "cuda" if torch.cuda.is_available() else "cpu"
pipe.to(device)

# 감정 라벨 매핑
emotion_labels = {
    "LABEL_0": "NEGATIVE",
    "LABEL_1": "NEUTRAL",
    "LABEL_2": "POSITIVE"
}

# SQLite 데이터베이스 연결 및 테이블 생성
conn = sqlite3.connect("dreams.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS dreams (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    dream_text TEXT,
    keywords TEXT,
    emotion TEXT,
    confidence REAL,
    selected_images TEXT
)
""")
conn.commit()

### NLP 코드 ###
def translate_to_english(text):
    """한국어 텍스트를 영어로 번역"""
    translator = GoogleTranslator(source="ko", target="en")
    english_text = translator.translate(text)
    return english_text

def enrich_prompt(text):
    """프롬프트를 보강하여 세부적으로 표현"""
    enriched_text = f"{text}, highly detailed, vibrant colors, cinematic lighting, fantasy style"
    return enriched_text

def extract_keywords(text):
    """텍스트에서 키워드를 추출"""
    doc = nlp(text)
    keywords = [token.text for token in doc if token.pos_ in ["NOUN", "PROPN", "ADJ", "VERB", "ADV"]]
    return keywords

def analyze_emotion(text):
    """영어 텍스트 감정 분석"""
    emotion_result = emotion_analyzer(text)
    raw_label = emotion_result[0]['label']  # 감정 라벨 (LABEL_0, LABEL_1, LABEL_2)
    emotion = emotion_labels[raw_label]  # 라벨을 사람이 이해할 수 있는 값으로 변환
    confidence = emotion_result[0]['score']  # 감정 확률
    return emotion, confidence

### GAN 코드 ###
def generate_images(prompt, num_images=5, steps=30, guidance=7.5, output_dir="generated_images"):
    """텍스트를 기반으로 다수의 이미지를 생성하고 저장"""
    os.makedirs(output_dir, exist_ok=True)
    print(f"'{prompt}' 텍스트에 기반한 이미지 {num_images}장을 생성합니다.")

    image_paths = []  # 생성된 이미지 파일 경로를 저장
    for i in range(num_images):
        print(f"이미지 {i+1}/{num_images} 생성 중...")
        try:
            # 이미지 생성
            output = pipe(prompt=prompt, num_inference_steps=steps, guidance_scale=guidance)
            image = output.images[0]

            # 이미지 저장
            image_path = os.path.join(output_dir, f"image_{i+1}.png")
            image.save(image_path)
            image_paths.append(image_path)
        except Exception as e:
            print(f"이미지 {i+1} 생성 중 오류 발생: {e}")

    print(f"생성된 이미지는 '{output_dir}' 폴더에 저장되었습니다.")
    return image_paths

def select_images(image_paths):
    """사용자가 생성된 이미지 중 선택"""
    print("\n생성된 이미지 목록:")
    for i, path in enumerate(image_paths):
        print(f"{i + 1}: {path}")

    selected_indices = input("사용자가 선택한 이미지 번호를 쉼표로 구분하여 입력하세요 (예: 1,3): ").strip()
    selected_indices = [int(idx) - 1 for idx in selected_indices.split(",") if idx.isdigit()]
    selected_images = [image_paths[i] for i in selected_indices if 0 <= i < len(image_paths)]
    return selected_images

### 통합 실행 ###
dream_text = input("꿈 내용을 입력하세요: ").strip()

if dream_text:
    print("\n### NLP 처리 시작 ###")

    # 1. 한국어를 영어로 번역
    translated_text = translate_to_english(dream_text)
    print(f"번역된 영어 문장: {translated_text}")

    # 2. 감정 분석
    emotion, confidence = analyze_emotion(translated_text)
    print(f"감정: {emotion}, 확률: {confidence:.2f}")

    # 3. 키워드 추출
    keywords = extract_keywords(translated_text)
    print(f"추출된 키워드: {keywords}")

    print("\n### GAN 처리 시작 ###")

    # 4. 프롬프트 보강
    enriched_text = enrich_prompt(translated_text)
    print(f"보강된 텍스트: {enriched_text}")

    # 5. 이미지 생성
    print("이미지 생성 중...")
    generated_images = generate_images(enriched_text, num_images=5, steps=30, guidance=7.5)
    print("이미지 생성 완료!")

    # 6. 이미지 선택
    selected_images = select_images(generated_images)
    print(f"선택된 이미지: {selected_images}")

    print("\n### 데이터베이스 저장 ###")

    # 7. 데이터베이스에 저장
    dream_data = (
        dream_text,
        ", ".join(keywords),
        emotion,
        confidence,
        ", ".join(selected_images)  # 선택된 이미지들을 쉼표로 구분하여 저장
    )
    cursor.execute("INSERT INTO dreams (dream_text, keywords, emotion, confidence, selected_images) VALUES (?, ?, ?, ?, ?)", dream_data)
    conn.commit()

    print("꿈 데이터가 데이터베이스에 저장되었습니다!")
else:
    print("입력된 텍스트가 없습니다.")

"""# 4. 꿈 데이터 저장
꿈 텍스트, 키워드, 감정, 생성된 이미지를 SQLite 데이터베이스에 저장합니다.
"""

import sqlite3

# SQLite 데이터베이스 연결
conn = sqlite3.connect("dreams.db")
cursor = conn.cursor()

# 데이터 조회 함수
def fetch_latest_dream():
    """데이터베이스에서 가장 최근에 저장된 꿈 데이터를 가져옴"""
    cursor.execute("SELECT * FROM dreams ORDER BY id DESC LIMIT 1")
    latest_dream = cursor.fetchone()
    if latest_dream:
        return {
            "id": latest_dream[0],
            "dream_text": latest_dream[1],
            "keywords": latest_dream[2],
            "emotion": latest_dream[3],
            "confidence": latest_dream[4],
            "image_path": latest_dream[5]
        }
    return None

# 가장 최근의 데이터 가져오기
latest_dream = fetch_latest_dream()

if latest_dream:
    print("\n### 가장 최근의 꿈 데이터 ###")
    print(f"ID: {latest_dream['id']}")
    print(f"꿈 내용: {latest_dream['dream_text']}")
    print(f"추출된 키워드: {latest_dream['keywords']}")
    print(f"감정: {latest_dream['emotion']} (확률: {latest_dream['confidence']:.2f})")
    print(f"생성된 이미지 경로: {latest_dream['image_path']}")

    # 생성된 이미지를 시각화 (옵션)
    try:
        from PIL import Image
        import matplotlib.pyplot as plt

        image = Image.open(latest_dream["image_path"])
        plt.imshow(image)
        plt.axis("off")
        plt.title(f"Dream Image (ID: {latest_dream['id']})")
        plt.show()
    except Exception as e:
        print(f"이미지 시각화 중 오류 발생: {e}")
else:
    print("데이터베이스에 저장된 꿈 데이터가 없습니다.")

"""# 5. 전체 흐름 통합
이제 전체 코드의 흐름을 통합해봅니다:

# 서빙
"""

!pip install flask
!pip install transformers
!pip install clip-by-openai
!pip install dalle-pytorch
!pip install torch torchvision pillow

from flask import Flask, request, render_template
from transformers import pipeline
from dalle_pytorch import DALLE, OpenAIDiscreteVAE
import clip
import torch
from PIL import Image
import sqlite3
import os

# Flask 앱 초기화
app = Flask(__name__)

# 경로 설정
UPLOAD_FOLDER = "static/generated"
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# NLP 모델 초기화
emotion_analyzer = pipeline("sentiment-analysis")

# DALL·E 및 CLIP 모델 초기화
vae = OpenAIDiscreteVAE()
dalle = DALLE(vae=vae, dim=512, text_seq_len=256, depth=1, heads=8, dim_head=64, ff_mult=4)
clip_model, clip_preprocess = clip.load("ViT-B/32", device="cpu")

# SQLite 데이터베이스 초기화
conn = sqlite3.connect("dreams.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS dreams (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    dream_text TEXT,
    keywords TEXT,
    emotion TEXT,
    image_path TEXT
)
""")
conn.commit()


@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        # 사용자 입력 받기
        dream_text = request.form.get("dream_text")

        # 1. NLP: 키워드 및 감정 분석
        keywords = [word for word in dream_text.split() if word in ["바다", "산", "숲", "추락", "어둠"]]
        emotion_result = emotion_analyzer(dream_text)
        emotion = emotion_result[0]['label']

        # 2. GAN: 이미지 생성
        prompt = f"A deep ocean with waves, representing {emotion.lower()} emotions"
        text = torch.randint(0, 256, (1, 256))  # 텍스트 토큰화 (임시)
        images = dalle.generate_images(text)
        image = Image.fromarray(images[0].cpu().numpy(), 'RGB')
        image_path = os.path.join(UPLOAD_FOLDER, "generated_image.jpg")
        image.save(image_path)

        # 3. CLIP: 텍스트-이미지 매칭
        image_tensor = clip_preprocess(Image.open(image_path)).unsqueeze(0).to("cpu")
        text_tokens = clip.tokenize([dream_text]).to("cpu")
        text_features = clip_model.encode_text(text_tokens)
        image_features = clip_model.encode_image(image_tensor)
        similarity = torch.cosine_similarity(text_features, image_features).item()

        # 4. 데이터 저장
        dream_data = (dream_text, ", ".join(keywords), emotion, image_path)
        cursor.execute("INSERT INTO dreams (dream_text, keywords, emotion, image_path) VALUES (?, ?, ?, ?)", dream_data)
        conn.commit()

        # 결과 페이지로 전달
        return render_template("result.html",
                               dream_text=dream_text,
                               keywords=keywords,
                               emotion=emotion,
                               image_path=image_path,
                               similarity=similarity)

    return render_template("index.html")


@app.route("/history")
def history():
    cursor.execute("SELECT * FROM dreams ORDER BY id DESC")
    rows = cursor.fetchall()
    return render_template("history.html", rows=rows)


if __name__ == "__main__":
    app.run(debug=True)

"""html"""

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dream Analyzer</title>
</head>
<body>
    <h1>꿈 분석기</h1>
    <form action="/" method="post">
        <textarea name="dream_text" rows="5" cols="50" placeholder="꿈 내용을 입력하세요"></textarea><br>
        <button type="submit">분석하기</button>
    </form>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dream History</title>
</head>
<body>
    <h1>꿈 기록</h1>
    <table border="1">
        <tr>
            <th>ID</th>
            <th>꿈 내용</th>
            <th>키워드</th>
            <th>감정</th>
            <th>이미지</th>
        </tr>
        {% for row in rows %}
        <tr>
            <td>{{ row[0] }}</td>
            <td>{{ row[1] }}</td>
            <td>{{ row[2] }}</td>
            <td>{{ row[3] }}</td>
            <td><img src="{{ row[4] }}" alt="Generated Image" style="max-width: 100px;"></td>
        </tr>
        {% endfor %}
    </table>
    <a href="/">돌아가기</a>
</body>
</html>

python app.py

